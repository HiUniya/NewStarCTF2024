e =  683
c1 =  56853945083742777151835031127085909289912817644412648006229138906930565421892378967519263900695394136817683446007470305162870097813202468748688129362479266925957012681301414819970269973650684451738803658589294058625694805490606063729675884839653992735321514315629212636876171499519363523608999887425726764249
c2 =  89525609620932397106566856236086132400485172135214174799072934348236088959961943962724231813882442035846313820099772671290019212756417758068415966039157070499263567121772463544541730483766001321510822285099385342314147217002453558227066228845624286511538065701168003387942898754314450759220468473833228762416
n =  147146340154745985154200417058618375509429599847435251644724920667387711123859666574574555771448231548273485628643446732044692508506300681049465249342648733075298434604272203349484744618070620447136333438842371753842299030085718481197229655334445095544366125552367692411589662686093931538970765914004878579967
delta =  93400488537789082145777768934799642730988732687780405889371778084733689728835104694467426911976028935748405411688535952655119354582508139665395171450775071909328192306339433470956958987928467659858731316115874663323404280639312245482055741486933758398266423824044429533774224701791874211606968507262504865993

# c1 = (m+delta*t1)^e
# c2 = (m+1)^e

from Crypto.Util.number import *


def myGcd(x, y):
    if y == 0:
        return x.monic()
    return myGcd(y, x%y)

for i in range(74,256):
        R.<x> = PolynomialRing(Zmod(n))
        g1 = (x+i*delta)^e - c1
        g2 = (x+(i-74)*delta)^e - c2
        v = myGcd(g2,g1)
        print(i,i-74)
        M = n - int(v.coefficients()[0])
        if g1(M) == 0:
            print(long_to_bytes(M))